//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34014
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class Spring : MonoBehaviour
{
	public float distance = 1;
	public float k = 10f; //Жесткость
	public bool affectConnected = true;
	float bufferLenght = 0.1f;
	
	private Rigidbody2D other;
	public Rigidbody2D connectedBody {
		get{return other;}
		set{
			other = value; 
			distance = (this.transform.position - other.transform.position).magnitude;
		}
	}

	public void FixedUpdate() {
		float delta = Time.smoothDeltaTime;

		if (other != null) {		
			float l = (this.transform.position - other.transform.position).magnitude;
			float dl = (distance - l);


			/*
			if(Math.Abs(dl) <= bufferLenght) return;
			dl -= bufferLenght * Math.Sign(dl);
			*/

			Vector2 force = this.transform.position - other.transform.position;
			force.Normalize ();
			float forceModule = Math.Abs(dl) * Mathf.Pow (k, (1 + Math.Abs (dl)/distance)); 

			float FmaxThis  = 0.9f * Math.Abs(dl) * this.rigidbody2D.mass / (delta * delta);
			float FmaxOther = 0.9f * Math.Abs(dl) * other.mass / (delta * delta);

			//Debug.Log(forceModule - FmaxOther);

			if(forceModule < FmaxThis) FmaxThis = forceModule;
			if(forceModule < FmaxOther) FmaxOther = forceModule;
			//Убираем раскачивания из-за дискретного шага: 

			this.rigidbody2D.AddForce (force * Math.Sign(dl) * FmaxThis);
			if(affectConnected) other.AddForce (-force * Math.Sign(dl) * FmaxOther);
		}
	}

	public void Update() {
	}
}

